package discord

import (
	"github.com/foxcapades/lib-go-discord/v0/pkg/discord/channel"
	"github.com/foxcapades/lib-go-discord/v0/pkg/discord/comm"
	"github.com/foxcapades/lib-go-discord/v0/pkg/discord/message"
	"github.com/foxcapades/lib-go-discord/v0/pkg/dlib"
	"time"
)

// Message represents a message sent in a channel within Discord.
type Message interface {
	// ID returns the current value of this record's `id` field.
	//
	// The `id` field contains the id of the message.
	ID() dlib.Snowflake

	// SetID overwrites the current value of this record's `id` field.
	SetID(dlib.Snowflake) Message

	// ChannelID returns the current value of this record's `channel_id` field.
	//
	// The `channel_id` field contains the id of the channel the message was sent
	// in.
	ChannelID() dlib.Snowflake

	// SetChannelID overwrites the current value of this record's `channel_id`
	// field.
	SetChannelID(dlib.Snowflake) Message

	// GuildID returns the current value of this record's `guild_id` field.
	//
	// The `guild_id` field contains the id of the guild the message was sent in.
	//
	// If this method is called on a field that is unset, this method will panic.
	// Use GuildIDIsSet to check if the field is present before use.
	GuildID() dlib.Snowflake

	// GuildIDIsSet returns whether this record's `guild_id` field is currently
	// present.
	GuildIDIsSet() bool

	// SetGuildID overwrites the current value of this record's `guild_id` field.
	SetGuildID(dlib.Snowflake) Message

	// UnsetGuildID removes this record's `guild_id` field.
	UnsetGuildID() Message

	// Author returns the current value of this record's `author` field.
	//
	// The `author` field contains the author of this message (not guaranteed to
	// be a valid user).
	//
	// The author object follows the structure of the user object, but is only a
	// valid user in the case where the message is generated by a user or bot
	// user. If the message is generated by a webhook, the author object
	// corresponds to the webhook's id, username, and avatar.
	//
	// You can tell if a message is generated by a webhook by checking for the
	// webhook_id on the message object.
	Author() User

	// SetAuthor overwrites the current value of this record's `author` field.
	SetAuthor(User) Message

	// Member returns the current value of this record's `member` field.
	//
	// The `member` field contains the member properties for this message's
	// author.
	//
	// The member object exists in MESSAGE_CREATE and MESSAGE_UPDATE events from
	// text-based guild channels. This allows bots to obtain real-time member data
	// without requiring bots to store member state in memory.
	//
	// If this method is called on a field that is unset, this method will panic.
	// Use MemberIsSet to check if the field is present before use.
	Member() GuildMember

	// MemberIsSet returns whether this record's `member` field is currently
	// present.
	MemberIsSet() bool

	// SetMember overwrites the current value of this record's `member` field.
	SetMember(GuildMember) Message

	// UnsetMember removes this record's `member` field.
	UnsetMember() Message

	// Content returns the current value of this record's `content` field.
	//
	// The `content` field contains the contents of the message.
	Content() message.Content

	// SetContent overwrites the current value of this record's `content` field.
	SetContent(message.Content) Message
	//contents of the message

	// Timestamp returns the current value of this record's `timestamp` field.
	//
	// The `timestamp` field contains the when this message was sent.
	Timestamp() time.Time

	// SetTimestamp overwrites the current value of this record's `timestamp`
	// field.
	SetTimestamp(time.Time) Message

	// EditedTimestamp returns the current value of this record's
	// `edited_timestamp` field.
	//
	// The `edited_timestamp` field contains the when this message was edited (or
	// null if never).
	//
	// If this method is called on a field with a null value, this method will
	// panic.  Use EditedTimestampIsNull to check if the field is null before use.
	EditedTimestamp() time.Time

	// EditedTimestampIsNull returns whether this record's `edited_timestamp`
	// field is currently null.
	EditedTimestampIsNull() bool

	// SetEditedTimestamp overwrites the current value of this record's
	// `edited_timestamp` field.
	SetEditedTimestamp(time.Time) Message

	// SetNullEditedTimestamp overwrites the current value of this record's
	// `edited_timestamp` field with `null`.
	SetNullEditedTimestamp() Message

	// TTS returns the current value of this record's `tts` field.
	//
	// The `tts` field indicates whether this was a TTS message.
	TTS() bool

	// SetTTS overwrites the current value of this record's `tts` field.
	SetTTS(bool) Message

	// MentionEveryone returns the current value of this record's
	// `mention_everyone` field.
	//
	// The `mention_everyone` field indicates whether this message mentions
	// everyone.
	MentionEveryone() bool

	// SetMentionEveryone overwrites the current value of this record's
	// `mention_everyone` field.
	SetMentionEveryone(bool) Message

	// Mentions returns the current value of this record's `mentions` field.
	//
	// The `mentions` field contains the users specifically mentioned in the
	// message.
	//
	// The user objects in the mentions array will only have the partial member
	// field present in MESSAGE_CREATE and MESSAGE_UPDATE events from text-based
	// guild channels.
	Mentions() []User

	// SetMentions overwrites the current value of this record's `mentions` field.
	SetMentions([]User) Message

	// MentionRoles returns the current value of this record's `mention_roles`
	// field.
	//
	// The `mention_roles` field contains the roles specifically mentioned in this
	// message.
	MentionRoles() []comm.Role

	// SetMentionRoles overwrites the current value of this record's
	// `mention_roles` field.
	SetMentionRoles([]comm.Role) Message

	// MentionChannels returns the current value of this record's
	// `mention_channels` field.
	//
	// The `mention_channels` field contains the channels specifically mentioned
	// in this message.
	//
	// Not all channel mentions in a message will appear in mention_channels.
	// Only textual channels that are visible to everyone in a lurkable guild will
	// ever be included. Only crossposted messages (via Channel Following)
	// currently include mention_channels at all.
	//
	// If no mentions in the message meet these requirements, this field will not
	// be sent.
	//
	// If this method is called on a field that is unset, this method will panic.
	// Use MentionChannelsIsSet to check if the field is present before use.
	MentionChannels() []channel.Mention

	// MentionChannelsIsSet returns whether this record's `mention_channels` field
	// is currently present.
	MentionChannelsIsSet() bool

	// SetMentionChannels overwrites the current value of this record's
	// `mention_channels` field.
	SetMentionChannels([]channel.Mention) Message

	// UnsetMentionChannels removes this record's `mention_channels` field.
	UnsetMentionChannels() Message

	// Attachments returns the current value of this record's `attachments` field.
	//
	// The `attachments` field contains any attached files.
	Attachments() []message.Attachment

	// SetAttachments overwrites the current value of this record's `attachments`
	// field.
	SetAttachments([]message.Attachment) Message

	// Embeds returns the current value of this record's `embeds` field.
	//
	// The `embeds` field contains any embedded content.
	Embeds() []message.Embed

	// SetEmbeds overwrites the current value of this record's `embeds` field.
	SetEmbeds([]message.Embed) Message

	// Reactions returns the current value of this record's `reactions` field.
	//
	// The `reactions` field contains any reactions to the message.
	//
	// If this method is called on a field that is unset, this method will panic.
	// Use ReactionsIsSet to check if the field is present before use.
	Reactions() []MessageReaction

	// ReactionsIsSet returns whether this record's `reactions` field is currently
	// present.
	ReactionsIsSet() bool

	// SetReactions overwrites the current value of this record's `reactions`
	// field.
	SetReactions([]MessageReaction) Message

	// UnsetReactions removes this record's `reactions` field.
	UnsetReactions() Message

	// Nonce returns the current value of this record's `nonce` field.
	//
	// The `nonce` field is used for validating a message was sent.
	//
	// If this method is called on a field that is unset, this method will panic.
	// Use NonceIsSet to check if the field is present before use.
	Nonce() comm.Nonce

	// NonceIsSet returns whether this record's `nonce` field is currently present.
	NonceIsSet() bool

	// SetNonce overwrites the current value of this record's `nonce` field.
	SetNonce(comm.Nonce) Message

	// UnsetNonce removes this record's `nonce` field.
	UnsetNonce() Message

	// Pinned returns the current value of this record's `pinned` field.
	//
	// The `pinned` field indicates whether this message is pinned.
	Pinned() bool

	// SetPinned overwrites the current value of this record's `pinned` field.
	SetPinned(bool) Message

	// WebhookID returns the current value of this record's `webhook_id` field.
	//
	// The `webhook_id` field contains the webhook's id if the message is
	// generated by a webhook.
	//
	// If this method is called on a field that is unset, this method will panic.
	// Use WebhookIDIsSet to check if the field is present before use.
	WebhookID() dlib.Snowflake

	// WebhookIDIsSet returns whether this record's `webhook_id` field is
	// currently present.
	WebhookIDIsSet() bool

	// SetWebhookID overwrites the current value of this record's `webhook_id`
	// field.
	SetWebhookID(dlib.Snowflake) Message

	// UnsetWebhookID removes this record's `webhook_id` field.
	UnsetWebhookID() Message

	// Type returns the current value of this record's `type` field.
	//
	// The `type` field contains the type of message.
	Type() message.Type

	// SetType overwrites the current value of this record's `type` field.
	SetType(message.Type) Message

	// Activity returns the current value of this record's `activity` field.
	//
	// The `activity` field is sent with Rich Presence-related chat embeds.
	//
	// If this method is called on a field that is unset, this method will panic.
	// Use ActivityIsSet to check if the field is present before use.
	Activity() message.Activity

	// ActivityIsSet returns whether this record's `activity` field is currently
	// present.
	ActivityIsSet() bool

	// SetActivity overwrites the current value of this record's `activity` field.
	SetActivity(message.Activity) Message

	// UnsetActivity removes this record's `activity` field.
	UnsetActivity() Message

	// Application returns the current value of this record's `application` field.
	//
	// The `application` field is sent with Rich Presence-related chat embeds.
	//
	// If this method is called on a field that is unset, this method will panic.
	// Use ApplicationIsSet to check if the field is present before use.
	Application() message.Application

	// ApplicationIsSet returns whether this record's `application` field is
	// currently present.
	ApplicationIsSet() bool

	// SetApplication overwrites the current value of this record's `application`
	// field.
	SetApplication(message.Application) Message

	// UnsetApplication removes this record's `application` field.
	UnsetApplication() Message

	// MessageReference returns the current value of this record's
	// `message_reference` field.
	//
	// The `message_reference` field contains the reference data sent with
	// crossposted messages.
	//
	// If this method is called on a field that is unset, this method will panic.
	// Use MessageReferenceIsSet to check if the field is present before use.
	MessageReference() message.Reference

	// MessageReferenceIsSet returns whether this record's `message_reference`
	// field is currently present.
	MessageReferenceIsSet() bool

	// SetMessageReference overwrites the current value of this record's
	// `message_reference` field.
	SetMessageReference(message.Reference) Message

	// UnsetMessageReference removes this record's `message_reference` field.
	UnsetMessageReference() Message

	// Flags returns the current value of this record's `flags` field.
	//
	// The `flags` field contains the message flags combined as a bitfield.
	//
	// If this method is called on a field that is unset, this method will panic.
	// Use FlagsIsSet to check if the field is present before use.
	Flags() message.Flag

	// FlagsIsSet returns whether this record's `flags` field is currently
	// present.
	FlagsIsSet() bool

	// SetFlags overwrites the current value of this record's `flags` field.
	SetFlags(message.Flag) Message

	// UnsetFlags removes this record's `flags` field.
	UnsetFlags() Message
	//message flags combined as a bitfield

	AddFlag(message.Flag) Message

	RemoveFlag(message.Flag) Message

	FlagsContains(message.Flag) bool
}
