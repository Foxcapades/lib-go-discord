package channel

import (
	"github.com/foxcapades/lib-go-discord/pkg/discord/comm"
	"github.com/foxcapades/lib-go-discord/pkg/discord/guild"
	"github.com/foxcapades/lib-go-discord/pkg/discord/user"
	"github.com/foxcapades/lib-go-discord/pkg/dlib"
	"time"
)

// Message represents a message sent in a channel within Discord.
type Message interface {
	//id of the message
	ID() dlib.Snowflake
	SetID(dlib.Snowflake) Message

	//id of the channel the message was sent in
	ChannelID() dlib.Snowflake
	SetChannelID(dlib.Snowflake) Message

	//id of the guild the message was sent in
	GuildID() dlib.Snowflake
	GuildIDIsSet() bool
	SetGuildID(dlib.Snowflake) Message
	UnsetGuildID() Message

	//the author of this message (not guaranteed to be a valid user, see below)
	//
	// The author object follows the structure of the user object, but is only a
	// valid user in the case where the message is generated by a user or bot
	// user. If the message is generated by a webhook, the author object
	// corresponds to the webhook's id, username, and avatar.
	//
	// You can tell if a message is generated by a webhook by checking for the
	// webhook_id on the message object.
	Author() user.User
	SetAuthor(user.User) Message

	//member properties for this message's author
	//
	// The member object exists in MESSAGE_CREATE and MESSAGE_UPDATE events from
	// text-based guild channels. This allows bots to obtain real-time member data
	// without requiring bots to store member state in memory.
	Member() guild.Member
	MemberIsSet() bool
	SetMember(guild.Member) Message
	UnsetMember() Message

	//contents of the message
	Content() string
	SetContent(string) Message

	//when this message was sent
	Timestamp() time.Time
	SetTimestamp(time.Time) Message

	//when this message was edited (or null if never)
	EditedTimestamp() time.Time
	EditedTimestampIsNull() bool
	SetEditedTimestamp(time.Time) Message
	SetNullEditedTimestamp() Message

	//whether this was a TTS message
	TTS() bool
	SetTTS(bool) Message

	//whether this message mentions everyone
	MentionEveryone() bool
	SetMentionEveryone(bool) Message

	//users specifically mentioned in the message
	//
	// The user objects in the mentions array will only have the partial member
	// field present in MESSAGE_CREATE and MESSAGE_UPDATE events from text-based
	// guild channels.
	Mentions() []user.User
	SetMentions([]user.User) Message

	//roles specifically mentioned in this message
	MentionRoles() []comm.Role
	SetMentionRoles([]comm.Role) Message

	//channels specifically mentioned in this message
	//
	// Not all channel mentions in a message will appear in mention_channels.
	// Only textual channels that are visible to everyone in a lurkable guild will
	// ever be included. Only crossposted messages (via Channel Following)
	// currently include mention_channels at all.
	//
	// If no mentions in the message meet these requirements, this field will not
	// be sent.
	MentionChannels() []Mention
	MentionChannelsIsSet() bool
	SetMentionChannels([]Mention) Message
	UnsetMentionChannels() Message

	//any attached files
	Attachments() []Attachment
	SetAttachments([]Attachment) Message

	//any embedded content
	Embeds() []Embed
	SetEmbeds([]Embed) Message

	//reactions to the message
	Reactions() []Reaction
	ReactionsIsSet() bool
	SetReactions([]Reaction) Message
	UnsetReactions() Message

	//used for validating a message was sent
	Nonce() comm.Nonce
	NonceIsSet() bool
	SetNonce(comm.Nonce) Message
	UnsetNonce() Message

	//whether this message is pinned
	Pinned() bool
	SetPinned(bool) Message

	//if the message is generated by a webhook, this is the webhook's id
	WebhookID() dlib.Snowflake
	WebhookIDIsSet() bool
	SetWebhookID(dlib.Snowflake) Message
	UnsetWebhookID() Message

	//type of message
	Type() message.Type
	SetType(message.Type) Message

	//sent with Rich Presence-related chat embeds
	Activity() message.Activity
	ActivityIsSet() bool
	SetActivity(message.Activity) Message
	UnsetActivity() Message

	//sent with Rich Presence-related chat embeds
	Application() message.Application
	ApplicationIsSet() bool
	SetApplication(message.Application) Message
	UnsetApplication() Message

	//reference data sent with crossposted messages
	MessageReference() message.Reference
	MessageReferenceIsSet() bool
	SetMessageReference(message.Reference) Message
	UnsetMessageReference() Message

	//message flags combined as a bitfield
	Flags() message.Flag
	FlagsIsSet() bool
	UnsetFlags() Message
	SetFlags(message.Flag) Message
	AddFlag(message.Flag) Message
	RemoveFlag(message.Flag) Message
	FlagsContains(message.Flag) bool
}
